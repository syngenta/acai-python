version: 2.1
commands:
    python-install:
        steps:
            - run: ln -s local/requirements.txt requirements.txt
            - run: pip install -r requirements.txt
    python-test-install:
        steps:
            - run: ln -s local/requirements_dev.txt requirements.txt
            - run: pip install -r requirements.txt
    setup-artifacts:
        steps:
            - run: mkdir coverage && mkdir coverage/unit-tests && mkdir coverage/lint || exit 0
    python-lint:
        steps:
            - run: pylint acai
            - store_artifacts:
                path: ./coverage
    python-test:
        steps:
            - run: python -m unittest discover
    python-report:
        steps:
            - run: coverage run --source acai/ -m  pytest tests/acai --cov=acai --junitxml ./coverage/reports/xunit.xml --cov-report xml:./coverage/reports/coverage.xml --html=./coverage/unit-test/index.html --self-contained-html --cov-report html:./coverage -p no:warnings -o log_cli=true
            - store_test_results:
                path: ./coverage/unit-tests
            - store_artifacts:
                path: ./coverage
    pypi-setup:
        steps:
            - run: echo -e "[pypi]" >> ~/.pypirc
            - run: echo -e "username = __token__" >> ~/.pypirc
            - run: echo -e "password = $PYPI_TOKEN" >> ~/.pypirc
    pypi-deploy:
        steps:
            - run: python3 -m pip install --user --upgrade setuptools wheel
            - run: python3 setup.py sdist bdist_wheel
            - run: python3 -m pip install --user --upgrade twine
            - run: python3 -m twine upload dist/*
jobs:
    install-build-test:
        docker:
            - image: cimg/python:3.9
        steps:
            - checkout
            - python-test-install
            - setup-artifacts
            - python-lint
            - python-test
            - python-report
    install-build-deploy:
        docker:
            - image: cimg/python:3.9
        steps:
            - checkout
            - python-install
            - pypi-setup
            - pypi-deploy
workflows:
    install-build-deploy:
        jobs:
            - install-build-deploy:
                filters:
                    tags:
                        only: /.*/
                    branches:
                        ignore: /.*/
    install-build-test:
        jobs:
            - install-build-test:
                filters:
                    tags:
                        ignore: /.*/